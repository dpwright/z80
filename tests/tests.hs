import Test.Tasty
import Test.Tasty.HUnit

import Data.ByteString as BS
import Data.Word

import Z80

import Control.Monad  (void)
import Prelude hiding (and, or)

($?=) :: Z80ASM -> [Word8] -> Assertion
asm $?= bytes = extractBytes asm @?= pack bytes
  where extractBytes = asmData . org 0 . void

pad :: Int -> Z80ASM -> Z80ASM
pad n asm = db (BS.replicate n 0) >> asm

main :: IO ()
main = defaultMain $ testGroup "Tests" [
  testGroup "Load Group"
  [ testCase "LD r, r'"     $ ld H E               $?= [0x63]
  , testCase "LD r, n"      $ ld E 0xa5            $?= [0x1e, 0xa5]
  , testCase "LD r, (HL)"   $ ld C [HL]            $?= [0x4e]
  , testCase "LD r, (IX+d)" $ ld B [IX + 0x19]     $?= [0xdd, 0x46, 0x19]
  , testCase "LD r, (IY+d)" $ ld B [IY + 0x19]     $?= [0xfd, 0x46, 0x19]
  , testCase "LD (HL), r"   $ ld [HL] B            $?= [0x70]
  , testCase "LD (IX+d), r" $ ld [IX + 0x6] C      $?= [0xdd, 0x71, 0x06]
  , testCase "LD (IY+d), r" $ ld [IY + 0x4] C      $?= [0xfd, 0x71, 0x04]
  , testCase "LD (HL), n"   $ ld [HL] 0x28         $?= [0x36, 0x28]
  , testCase "LD (IX+d), n" $ ld [IX + 0x5] 0x5a   $?= [0xdd, 0x36, 0x05, 0x5a]
  , testCase "LD (IY+d), n" $ ld [IY + 0x10] 0x97  $?= [0xfd, 0x36, 0x10, 0x97]
  , testCase "LD A, (BC)"   $ ld A [BC]            $?= [0x0a]
  , testCase "LD A, (DE)"   $ ld A [DE]            $?= [0x1a]
  , testCase "LD A, (nn)"   $ ld A [0x8832]        $?= [0x3a, 0x32, 0x88]
  , testCase "LD (BC), A"   $ ld [BC] A            $?= [0x02]
  , testCase "LD (DE), A"   $ ld [DE] A            $?= [0x12]
  , testCase "LD (nn), A"   $ ld [0x3141] A        $?= [0x32, 0x41, 0x31]
  , testCase "LD A, I"      $ ld A I               $?= [0xed, 0x57]
  , testCase "LD A, R"      $ ld A R               $?= [0xed, 0x5f]
  , testCase "LD I, A"      $ ld I A               $?= [0xed, 0x47]
  , testCase "LD R, A"      $ ld R A               $?= [0xed, 0x4f]
  , testCase "LD dd, nn"    $ ld HL 0x5000         $?= [0x21, 0x00, 0x50]
  , testCase "LD IX, nn"    $ ld IX 0x45A2         $?= [0xdd, 0x21, 0xA2, 0x45]
  , testCase "LD IY, nn"    $ ld IY 0x7733         $?= [0xfd, 0x21, 0x33, 0x77]
  , testCase "LD HL, (nn)"  $ ld HL [0x4545]       $?= [0x2a, 0x45, 0x45]
  , testCase "LD dd, (nn)"  $ ld BC [0x2130]       $?= [0xed, 0x4b, 0x30, 0x21]
  , testCase "LD IX, (nn)"  $ ld IX [0x6666]       $?= [0xdd, 0x2a, 0x66, 0x66]
  , testCase "LD IY, (nn)"  $ ld IY [0x6666]       $?= [0xfd, 0x2a, 0x66, 0x66]
  , testCase "LD (nn), HL"  $ ld [0xb229] HL       $?= [0x22, 0x29, 0xb2]
  , testCase "LD (nn), dd"  $ ld [0x1000] BC       $?= [0xed, 0x43, 0x00, 0x10]
  , testCase "LD (nn), IX"  $ ld [0x4392] IX       $?= [0xdd, 0x22, 0x92, 0x43]
  , testCase "LD (nn), IY"  $ ld [0x8838] IY       $?= [0xfd, 0x22, 0x38, 0x88]
  , testCase "LD SP, HL"    $ ld SP HL             $?= [0xf9]
  , testCase "LD SP, IX"    $ ld SP IX             $?= [0xdd, 0xf9]
  , testCase "LD SP, IY"    $ ld SP IY             $?= [0xfd, 0xf9]
  , testCase "PUSH qq"      $ push AF              $?= [0xf5]
  , testCase "PUSH IX"      $ push IX              $?= [0xdd, 0xe5]
  , testCase "PUSH IY"      $ push IY              $?= [0xfd, 0xe5]
  , testCase "POP qq"       $ pop HL               $?= [0xe1]
  , testCase "POP IX"       $ pop IX               $?= [0xdd, 0xe1]
  , testCase "POP IY"       $ pop IY               $?= [0xfd, 0xe1]
  ],
  testGroup "Exchange, Block Transfer, and Search Group"
  [ testCase "EX DE, HL"    $ ex DE HL             $?= [0xeb]
  , testCase "EX AF, AF'"   $ ex AF AF'            $?= [0x08]
  , testCase "EXX"          $ exx                  $?= [0xd9]
  , testCase "EX (SP), HL"  $ ex [SP] HL           $?= [0xe3]
  , testCase "EX (SP), IX"  $ ex [SP] IX           $?= [0xdd, 0xe3]
  , testCase "EX (SP), IY"  $ ex [SP] IY           $?= [0xfd, 0xe3]
  , testCase "LDI"          $ ldi                  $?= [0xed, 0xa0]
  , testCase "LDIR"         $ ldir                 $?= [0xed, 0xb0]
  , testCase "LDD"          $ ldd                  $?= [0xed, 0xa8]
  , testCase "LDDR"         $ lddr                 $?= [0xed, 0xb8]
  , testCase "CPI"          $ cpi                  $?= [0xed, 0xa1]
  , testCase "CPIR"         $ cpir                 $?= [0xed, 0xb1]
  , testCase "CPD"          $ cpd                  $?= [0xed, 0xa9]
  , testCase "CPDR"         $ cpdr                 $?= [0xed, 0xb9]
  ],
  testGroup "8-Bit Arithmetic Group"
  [ testCase "ADD A, r"     $ add A C              $?= [0x81]
  , testCase "ADD A, n"     $ add A 0x33           $?= [0xc6, 0x33]
  , testCase "ADD A, (HL)"  $ add A [HL]           $?= [0x86]
  , testCase "ADD A, (IX+d)"$ add A [IX + 0x05]    $?= [0xdd, 0x86, 0x05]
  , testCase "ADD A, (IY+d)"$ add A [IY + 0x05]    $?= [0xfd, 0x86, 0x05]
  , testCase "ADC A, (HL)"  $ adc A [HL]           $?= [0x8e]
  , testCase "SUB D"        $ sub D                $?= [0x92]
  , testCase "SBC A, (HL)"  $ sbc A [HL]           $?= [0x9e]
  , testCase "AND B"        $ and B                $?= [0xa0]
  , testCase "OR H"         $ or H                 $?= [0xb4]
  , testCase "XOR n"        $ xor 0x5d             $?= [0xee, 0x5d]
  , testCase "CP (HL)"      $ cp [HL]              $?= [0xbe]
  , testCase "INC r"        $ inc D                $?= [0x14]
  , testCase "INC (HL)"     $ inc [HL]             $?= [0x34]
  , testCase "INC (IX+d)"   $ inc [IX + 0x10]      $?= [0xdd, 0x34, 0x10]
  , testCase "INC (IY+d)"   $ inc [IY + 0x10]      $?= [0xfd, 0x34, 0x10]
  , testCase "DEC r"        $ dec D                $?= [0x15]
  ],
  testGroup "General-Purpose Arithmetic and CPU Control Groups"
  [ testCase "DAA"          $ daa                  $?= [0x27]
  , testCase "CPL"          $ cpl                  $?= [0x2f]
  , testCase "NEG"          $ neg                  $?= [0xed, 0x44]
  , testCase "CCF"          $ ccf                  $?= [0x3f]
  , testCase "SCF"          $ scf                  $?= [0x37]
  , testCase "NOP"          $ nop                  $?= [0x00]
  , testCase "HALT"         $ halt                 $?= [0x76]
  , testCase "DI"           $ di                   $?= [0xf3]
  , testCase "EI"           $ ei                   $?= [0xfb]
  , testCase "IM 0"         $ im 0                 $?= [0xed, 0x46]
  , testCase "IM 1"         $ im 1                 $?= [0xed, 0x56]
  , testCase "IM 2"         $ im 2                 $?= [0xed, 0x5e]
  ],
  testGroup "16-Bit Arithmetic Group"
  [ testCase "ADD HL, ss"   $ add HL DE            $?= [0x19]
  , testCase "ADC HL, ss"   $ adc HL BC            $?= [0xed, 0x4a]
  , testCase "SBC HL, ss"   $ sbc HL DE            $?= [0xed, 0x52]
  , testCase "INC HL"       $ inc HL               $?= [0x23]
  , testCase "INC IX"       $ inc IX               $?= [0xdd, 0x23]
  , testCase "INC IY"       $ inc IY               $?= [0xfd, 0x23]
  , testCase "DEC IX"       $ dec IX               $?= [0xdd, 0x2b]
  , testCase "DEC IY"       $ dec IY               $?= [0xfd, 0x2b]
  ],
  testGroup "Rotate and Shift Group"
  [ testCase "RLCA"         $ rlca                 $?= [0x07]
  , testCase "RLA"          $ rla                  $?= [0x17]
  , testCase "RRCA"         $ rrca                 $?= [0x0f]
  , testCase "RRA"          $ rra                  $?= [0x1f]
  , testCase "RLC H"        $ rlc H                $?= [0xcb, 0x04]
  , testCase "RLC (HL)"     $ rlc [HL]             $?= [0xcb, 0x06]
  , testCase "RLC (IX+d)"   $ rlc [IX + 0x02]      $?= [0xdd, 0xcb, 0x02, 0x06]
  , testCase "RLC (IY+d)"   $ rlc [IY + 0x02]      $?= [0xfd, 0xcb, 0x02, 0x06]
  , testCase "RL H"         $ rl H                 $?= [0xcb, 0x14]
  , testCase "RL (HL)"      $ rl [HL]              $?= [0xcb, 0x16]
  , testCase "RL (IX+d)"    $ rl [IX + 0x02]       $?= [0xdd, 0xcb, 0x02, 0x16]
  , testCase "RL (IY+d)"    $ rl [IY + 0x02]       $?= [0xfd, 0xcb, 0x02, 0x16]
  , testCase "RRC H"        $ rrc H                $?= [0xcb, 0x0c]
  , testCase "RRC (HL)"     $ rrc [HL]             $?= [0xcb, 0x0e]
  , testCase "RRC (IX+d)"   $ rrc [IX + 0x02]      $?= [0xdd, 0xcb, 0x02, 0x0e]
  , testCase "RRC (IY+d)"   $ rrc [IY + 0x02]      $?= [0xfd, 0xcb, 0x02, 0x0e]
  , testCase "RR H"         $ rr H                 $?= [0xcb, 0x1c]
  , testCase "RR (HL)"      $ rr [HL]              $?= [0xcb, 0x1e]
  , testCase "RR (IX+d)"    $ rr [IX + 0x02]       $?= [0xdd, 0xcb, 0x02, 0x1e]
  , testCase "RR (IY+d)"    $ rr [IY + 0x02]       $?= [0xfd, 0xcb, 0x02, 0x1e]
  , testCase "SLA H"        $ sla H                $?= [0xcb, 0x24]
  , testCase "SLA (HL)"     $ sla [HL]             $?= [0xcb, 0x26]
  , testCase "SLA (IX+d)"   $ sla [IX + 0x02]      $?= [0xdd, 0xcb, 0x02, 0x26]
  , testCase "SLA (IY+d)"   $ sla [IY + 0x02]      $?= [0xfd, 0xcb, 0x02, 0x26]
  , testCase "SRA H"        $ sra H                $?= [0xcb, 0x2c]
  , testCase "SRA (HL)"     $ sra [HL]             $?= [0xcb, 0x2e]
  , testCase "SRA (IX+d)"   $ sra [IX + 0x02]      $?= [0xdd, 0xcb, 0x02, 0x2e]
  , testCase "SRA (IY+d)"   $ sra [IY + 0x02]      $?= [0xfd, 0xcb, 0x02, 0x2e]
  , testCase "SRL H"        $ srl H                $?= [0xcb, 0x3c]
  , testCase "SRL (HL)"     $ srl [HL]             $?= [0xcb, 0x3e]
  , testCase "SRL (IX+d)"   $ srl [IX + 0x02]      $?= [0xdd, 0xcb, 0x02, 0x3e]
  , testCase "SRL (IY+d)"   $ srl [IY + 0x02]      $?= [0xfd, 0xcb, 0x02, 0x3e]
  , testCase "RLD"          $ rld                  $?= [0xed, 0x6f]
  , testCase "RRD"          $ rrd                  $?= [0xed, 0x67]
  ],
  testGroup "Bit Set, Reset, and Test Group"
  [ testCase "BIT b, r"     $ bit 2 B              $?= [0xcb, 0x50]
  , testCase "BIT b, (HL)"  $ bit 4 [HL]           $?= [0xcb, 0x66]
  , testCase "BIT b, (IX+d)"$ bit 6 [IX + 0x04]    $?= [0xdd, 0xcb, 0x04, 0x76]
  , testCase "BIT b, (IY+d)"$ bit 6 [IY + 0x04]    $?= [0xfd, 0xcb, 0x04, 0x76]
  , testCase "SET b, r"     $ set 4 A              $?= [0xcb, 0xe7]
  , testCase "SET b, (HL)"  $ set 4 [HL]           $?= [0xcb, 0xe6]
  , testCase "SET b, (IX+d)"$ set 0 [IX + 0x03]    $?= [0xdd, 0xcb, 0x03, 0xc6]
  , testCase "SET b, (IY+d)"$ set 0 [IY + 0x03]    $?= [0xfd, 0xcb, 0x03, 0xc6]
  , testCase "RES b, r"     $ res 6 D              $?= [0xcb, 0xb2]
  ],
  testGroup "Jump Group"
  [ testCase "JP nn"        $ jp 0x8832            $?= [0xc3, 0x32, 0x88]
  , testCase "JP cc,nn"     $ jp C 0x1520          $?= [0xda, 0x20, 0x15]
  , testCase "JP (HL)"      $ jp [HL]              $?= [0xe9]
  , testCase "JR e"         $ jr $+ 5              $?= [0x18, 3]
  , testCase "JR C,e"       $ pad 4 (jr C $- 4)    $?= [0, 0, 0, 0, 0x38, -6]
  , testCase "JR NC,e"      $ jr NC $+ 0           $?= [0x30, -2]
  , testCase "JR Z,e"       $ jr Z $+ 5            $?= [0x28, 3]
  , testCase "JR NZ,e"      $ pad 4 (jr NZ $- 4)   $?= [0, 0, 0, 0, 0x20, -6]
  , testCase "DJNZ"         $ djnz $+ 5            $?= [0x10, 3]
  ],
  testGroup "Call and Return Group"
  [ testCase "CALL nn"      $ call 0x2135          $?= [0xcd, 0x35, 0x21]
  , testCase "CALL cc,nn"   $ call NC 0x2135       $?= [0xd4, 0x35, 0x21]
  , testCase "RET"          $ ret                  $?= [0xc9]
  , testCase "RET cc"       $ ret M                $?= [0xf8]
  , testCase "RETI"         $ reti                 $?= [0xed, 0x4d]
  , testCase "RETN"         $ retn                 $?= [0xed, 0x45]
  , testCase "RST p"        $ rst 0x18             $?= [0xdf]
  ],
  testGroup "Input and Output Group"
  [ testCase "IN A, (n)"    $ in_ A [0x01]         $?= [0xdb, 0x01]
  , testCase "IN r, (C)"    $ in_ D [C]            $?= [0xed, 0x50]
  , testCase "INI"          $ ini                  $?= [0xed, 0xa2]
  , testCase "INIR"         $ inir                 $?= [0xed, 0xb2]
  , testCase "IND"          $ ind                  $?= [0xed, 0xaa]
  , testCase "INDR"         $ indr                 $?= [0xed, 0xba]
  , testCase "OUT (n), A"   $ out [0x01] A         $?= [0xd3, 0x01]
  , testCase "OUT (C), r"   $ out [C] D            $?= [0xed, 0x51]
  , testCase "OUTI"         $ outi                 $?= [0xed, 0xa3]
  , testCase "OTIR"         $ otir                 $?= [0xed, 0xb3]
  , testCase "OUTD"         $ outd                 $?= [0xed, 0xab]
  , testCase "OTDR"         $ otdr                 $?= [0xed, 0xbb]
  ]
  ]
